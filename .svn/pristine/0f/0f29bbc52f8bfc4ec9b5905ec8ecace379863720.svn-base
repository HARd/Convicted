using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;

public class EscapeUI
{
	public Image taskImage;
	public Text taskText;
	public List<Image> subtaskImageList = new List<Image>();
	public List<GameObject> subtaskChalkLineList = new List<GameObject>();
	public List<Text> subtaskTextList = new List<Text>();
	public List<Image> subtaskCompleteImageList = new List<Image>();
	public Image CompleteImage;
}



public class QuestManager : MonoBehaviour 
{
	private static QuestManager _instance;
	public static QuestManager Instance { get { return _instance ?? (_instance = FindObjectOfType<QuestManager>()); } }
	protected QuestManager() { _instance = null; }

	
	string character;
	string character_locale;
	string task;
	string task_text;
	string questItem;
	string item_text;
	float reward_costs;
	Parameter reward;

	Quest quest;

	public string descriptionText;

	Action action;
	public Action oscar_action;
	public Action michael_action;
	public Action vincent_action;
	public Action old_jim_action;
	public Action chief_action;


	public Text questLogCountText;



	void Start () 
	{
		LoadQuestLog();
	}

	public void Save()
	{
		SaveQuestLog();
	}

	void Update()
	{
		questLogCountText.text = (PanelManager.Instance.QuestPanel.questLog.Count + StoryManager.Instance.activeStoreCounter).ToString();
	}


	public bool CheckVictory()
	{
		return Inventory.Instance.HasTool("escape_tunnel_success");
	}

	public void AddText(Item item, int locale, float cost)
	{
		questItem = item.name;
		task_text = "1. " + Localization.Instance.GetLocale(locale) + ": " + "<color=black>" + Localization.Instance.GetLocale(item.text_id) + "</color>" + "\n" + "2. " + Localization.Instance.GetLocale(347) + " " + character_locale;
		item_text = Localization.Instance.GetLocale(item.text_id);
		quest.hint = Localization.Instance.GetLocale(item.text_id) + " " + Localization.Instance.GetLocale(item.hint_id);
		reward_costs = cost;
	}

	public Item GetRandomItemCost(int max)
	{
		return PlayerInfo.Instance.GetRandomItem(item => item.cost > 0 && item.cost < max);
	}
		
	public void GenerateQuest(string _character)
	{
		// Check if there's already 5 quests in the Quest Log to avoid a while loop
		if(PanelManager.Instance.QuestPanel.questLog.Count >= 2) return;

		// Clean up data
		questItem = "";
		task = "";
		task_text = "";
		descriptionText = "";
		quest = new Quest();
		int x = 0;

		character = _character;
		x = Random.Range(0,100);
		switch(character)
		{
		case "oscar":
			character_locale = Localization.Instance.GetLocale(125);
			action = oscar_action;
			if(x <= 50) task = "get_item";
			else if(x > 50 && x <= 100) task = "get_weapon";
			if(x > 90 && PlayerInfo.Instance.CheckTrigger("oscar_bonus",true) != 0) task = "oscar_bonus";
			break;
		case "michael":
			character_locale = Localization.Instance.GetLocale(132);
			action = michael_action;
			if(x <= 100) task = "get_item";
			if(x > 90 && PlayerInfo.Instance.CheckTrigger("michael_bonus",true) != 0) task = "michael_bonus";
			break;
		case "vincent":
			character_locale = Localization.Instance.GetLocale(140);
			action = vincent_action;
			if(x <= 100) task = "get_weapon";
			if(x > 90 && PlayerInfo.Instance.CheckTrigger("vincent_bonus",true) != 0) task = "vincent_bonus";
			break;
		case "old_jim":
			character_locale = Localization.Instance.GetLocale(164);
			action = old_jim_action;
			task = "get_item";
			break;
		case "chief":
			character_locale = Localization.Instance.GetLocale(239);
			action = chief_action;
			if(x <= 50) task = "get_info";
			else if(x > 50) task = "find_stash";
			break;
		}

		Item item;
		// Initializing task
		switch(task)
		{
		case "get_item":
			item = GetRandomItemCost(100);
			AddText(item, 250, item.cost + Mathf.FloorToInt(Random.Range(0,5)));
			break;
		case "get_weapon":
			item = PlayerInfo.Instance.GetRandomWeapon();
			AddText(item, 291, item.cost + Mathf.FloorToInt(Random.Range(0,10)));
			break;
		case "oscar_bonus":
			AddText(GetRandomItemCost(100), 250, 1);
			break;
		case "michael_bonus":
			AddText(GetRandomItemCost(1000), 250, 1);
			break;
		case "vincent_bonus":
			AddText(GetRandomItemCost(100), 250, 1);
			break;
		case "get_info":
			questItem = "chief_get_info";
			task_text = "1. " + Localization.Instance.GetLocale(336) + "\n" + "2. " + Localization.Instance.GetLocale(347) + " " + character_locale;
			quest.hint = Localization.Instance.GetLocale(33);
			reward_costs = 10;
			break;
		case "find_stash":
			questItem = "chief_find_stash";
			x = Random.Range(0,100);
			if(x <= 25) item_text = "library";
			else if(x > 25 && x <= 50) item_text = "kitchen";
			else if(x > 50 && x <= 75) item_text = "common_room";
			else if(x > 75) item_text = "laundry";
			task_text = "1. " + Localization.Instance.GetLocale(354) + "\n" + "2. " + Localization.Instance.GetLocale(347) + " " + character_locale;
			quest.hint = Localization.Instance.GetLocale(34);
			reward_costs = 20;
			break;
		}

		// Generate reward for the quest
		while(reward_costs > 0)
		{
			reward = new Parameter();
			if(task == character+"_bonus")
			{
				reward.event_name = character+"_bonus";
				reward.value = 1;
				reward_costs -= 1;
			}
			else
			{
				int y = Mathf.FloorToInt(Random.Range(0,100));
				if (y <= 50 && character != "chief") 
				{
					bool no_cash = true;
					foreach(Parameter _reward in quest.rewards)
					{
						if(_reward.stat == "cash")
						{
							_reward.value++;
							reward_costs--;
							no_cash = false;
							break;
						} 
						else 
							no_cash = true;
					}
					if(no_cash)
					{
						reward.stat = "cash";
						reward.value++;
						reward_costs--;
						//quest.rewards.Add(reward);
						quest.rewards.Add(new cash(reward.stat, "", reward.value));
					}
				}
				else if (y > 50 && character != "chief")
				{
					bool no_rep = true;
					foreach(Parameter _reward in quest.rewards)
					{
						if(_reward.stat == "inmate_rep")
						{
							_reward.value++;
							reward_costs--;
							no_rep = false;
							break;
						} 
						else no_rep = true;
					}
					if(no_rep)
					{
						reward.stat = "inmate_rep";
						reward.value = 5;
						reward_costs -= 5;
						//quest.rewards.Add(reward);
						//print("-- QuestM");
						quest.rewards.Add(new inmate_rep(reward.stat, "", reward.value));
					}
				}
				else if(character == "chief")
				{
					reward.stat = "guard_rep";
					reward.value = reward_costs;
					//quest.rewards.Add(reward);
					quest.rewards.Add(new guard_rep(reward.stat, "", reward.value));
					reward_costs = 0;
					if(task == "find_stash")
					{
						reward = new Parameter();
						reward.stat = "trigger";
						reward.event_name = item_text+"_stash_search";
						reward.value = 0;
						//quest.rewards.Add(reward);
						quest.rewards.Add(new trigger(reward.stat, reward.event_name, reward.value));
					}
				}
			}
		}

		//Creating quest event description
		bool rep_reward = false;
		bool item_reward = false;

		if(character != "chief")
		{
			descriptionText = Localization.Instance.GetLocale(741) + " " +character_locale + ". " + Localization.Instance.GetLocale(742) + "." + "\n" + " - " + Localization.Instance.GetLocale(743) + " ";
			
			if(task == "get_item" || task == "get_weapon") descriptionText += Localization.Instance.GetLocale(744) + " <color=#147832>"+item_text+"</color>. ";
			else if(task == character+"_bonus") descriptionText += Localization.Instance.GetLocale(744) + " <color=#147832>"+item_text+"</color>. ";
			
			descriptionText += Localization.Instance.GetLocale(745) + " ";
			for(int i = 0;i<quest.rewards.Count;i++)
			{
				if(task == character+"_bonus")
				{
					descriptionText += Localization.Instance.GetLocale(746) + " ";
					switch(character)
					{
					case "oscar":
						descriptionText += Localization.Instance.GetLocale(747);
						break;
					case "michael":
						descriptionText += Localization.Instance.GetLocale(748);
						break;
					case "vincent":
						descriptionText += Localization.Instance.GetLocale(749);
						break;
					}
					descriptionText += ".";
				}
				else 
				{
					switch(quest.rewards[i].stat)
					{
					case "cash":
						if(!item_reward) descriptionText +=  Localization.Instance.GetLocale(750) + " ";
						descriptionText += "<color=#147832>" + quest.rewards[i].value + " " + Localization.Instance.GetLocale(865) + "</color>";
						item_reward = true;
						break;
					case "inmate_rep":
						rep_reward = true;
						break;
					}
				}
			}
			if(rep_reward && item_reward) descriptionText += " " + Localization.Instance.GetLocale(751);
			else if (rep_reward && !item_reward) descriptionText += " " + Localization.Instance.GetLocale(752);
			descriptionText += ".";
		}
		else
		{
			descriptionText = Localization.Instance.GetLocale(753) + " ";
			if(task == "get_info") descriptionText += Localization.Instance.GetLocale(754) + " ";
			else if(task == "find_stash") descriptionText += Localization.Instance.GetLocale(755) + " ";
			descriptionText += Localization.Instance.GetLocale(756);
		}

	}

	public void GenerateTutorialQuest(){
		// Clean up data
		questItem = "";
		task = "";
		task_text = "";
		descriptionText = "";
		quest = new Quest();

		character = "old_jim";
		action = old_jim_action;
		questItem = PlayerInfo.Instance.inventory[0].name;
		task = "get_item";
		task_text = "1. " + Localization.Instance.GetLocale(250) + ": " + "<color=black>" + Localization.Instance.GetLocale(PlayerInfo.Instance.inventory[0].text_id) + "</color>" + "\n" + "2. " + Localization.Instance.GetLocale(347) + " " +  Localization.Instance.GetLocale(164);
		quest.hint = Localization.Instance.GetLocale(PlayerInfo.Instance.inventory[0].text_id) + " " + Localization.Instance.GetLocale(PlayerInfo.Instance.inventory[0].hint_id);

		Parameter reward = new inmate_rep("inmate_rep", "", 10);
//		reward.stat = "inmate_rep";
//		reward.value = 10;
		quest.rewards.Add (reward);

	}

	// Initializing the quest and adding it to the Quest Log
	public void CreateQuest()
	{
		action.requireItem.Clear();
		action.requireWeapon.Clear();

		if(task == "get_item" || task == character+"_bonus" || character == "chief") 
			action.requireItem.Add(questItem);
		else 
			if(task == "get_weapon") 
				action.requireWeapon.Add(questItem);
		
		PlayerInfo.Instance.EquipItem(character+"_quest",true,false);

		quest.name = task;
		quest.char_name = character;
		quest.task = task_text;
		quest.removeQuestItems.Add(questItem);
		quest.removeQuestItems.Add(character+"_quest");

		switch(task)
		{
		case "get_info":
			PlayerInfo.Instance.EquipItem("get_info_special",true,false);
			quest.removeQuestItems.Add("get_info_special");
			break;
		case "find_stash":
			PlayerInfo.Instance.EquipItem("find_stash_special",true,false);
			quest.removeQuestItems.Add("find_stash_special");
			PlayerInfo.Instance.ChangeTrigger(item_text+"_stash_search",true,true);
			break;
		}

		PanelManager.Instance.QuestPanel.questLog.Add(quest);

		action.requireItem.Add(character + "_quest");
	}

	void SaveQuestLog()
	{
		SaveLoadXML.SaveList(PanelManager.Instance.QuestPanel.questLog, "QUEST");
	}
		
	void LoadQuestLog()
	{
		List<Quest>quests = new List<Quest>();
		SaveLoadXML.LoadList<Quest>(quests, "QUEST");
		
		foreach(Quest save_quest in quests)
		{
			quest = new Quest();
			quest = save_quest;
			if(Parameter.ChangeStart(quest.rewards))
				Debug.LogErrorFormat("Object {0} Error", name);

			switch(quest.char_name)
			{
			case "oscar":
				action = oscar_action;
				break;
			case "michael":
				action = michael_action;
				break;
			case "vincent":
				action = vincent_action;
				break;
			case "old_jim":
				action = old_jim_action;
				break;
			case "chief":
				action = chief_action;
				break;
			}

			action.requireItem.Clear();
			action.requireWeapon.Clear();

			if(quest.name == "get_item" || quest.char_name == "chief") 
				action.requireItem.Add(quest.removeQuestItems[0]);
			else if(quest.name == "get_weapon") 
				action.requireWeapon.Add(quest.removeQuestItems[0]);
			
			action.requireItem.Add(quest.char_name + "_quest");
			
			PanelManager.Instance.QuestPanel.questLog.Add(quest);
		}
	}
	
	// Check if the character is available
	public bool CheckFreeChar(string char_name)
	{
		if (PanelManager.Instance.QuestPanel.questLog.Count >= 2)
			return false;
		foreach(Quest quest in PanelManager.Instance.QuestPanel.questLog)
		{
			if(quest.char_name == char_name) return false;
		}
		return true;
	}
}
